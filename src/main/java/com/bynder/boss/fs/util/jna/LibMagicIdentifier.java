package com.bynder.boss.fs.util.jna;

import java.io.File;
import java.io.IOException;


public class LibMagicIdentifier {

    /** Magic database file extension. */
    private final static String MAGIC_DB_EXTENSION = ".mgc";

    /** The directory where source Magic definition files are stored. */
    private File magicFileDir = null;

    /** The compiled Magic file generated by this class. */
    private File compiledMagic = null;

    /** Instance of Libmagic JNA wrapper. */
    private static transient LibMagicJnaWrapper libMagicWrapper;

    public LibMagicIdentifier() throws LibMagicException {
        this.init();
    }
    public void init() throws LibMagicException {
    }

    /**
     * Initialize module if it has not been done yet.
     * @throws LibMagicException if an error occurs during initialization
     */
    public void checkIfInitialized() throws LibMagicException {
        if (libMagicWrapper == null) {
            // Initialize libmagic wrapper.
            libMagicWrapper = new LibMagicJnaWrapper();

            String compiledMagicPath = null;
            if (this.magicFileDir != null) {
                // Magic source directory set. => Compile magic files.
                if (libMagicWrapper.compile(
                        magicFileDir.getAbsolutePath()) != 0) {
                    throw new LibMagicException("Magic file compile error: "+ libMagicWrapper.getError());
                }
                // Look for compiled magic file. Its location varies according to
                // some compilation options of libmagic.
                // Was it stored in the current directory?
                String dbName = magicFileDir.getName() + MAGIC_DB_EXTENSION;
                File magicPath = new File(dbName);
                if (! magicPath.isFile()) {
                    // Nope! Must be in the parent dir. of the source definitions.
                    magicPath = new File(magicFileDir.getParentFile(), dbName);
                }
                compiledMagicPath = magicPath.getAbsolutePath();
                // Keep compiled file ref. for shutdown time cleanup.
                compiledMagic = magicPath;
                compiledMagic.deleteOnExit();
            }
            // Load magic definitions.
            if (libMagicWrapper.load(compiledMagicPath) != 0) {
                String fileRef = (compiledMagicPath != null)?
                        "Magic database \"" + compiledMagicPath + '"': "Default magic database";
                throw new LibMagicException(fileRef + " load error: " + libMagicWrapper.getError());
            }
        }
    }

    /**
     * Shuts down this instance, releasing used resources.
     */
    public void shutdown() {
        if (libMagicWrapper != null) {
            libMagicWrapper.close();
            libMagicWrapper = null;
        }
        if (compiledMagic != null) {
            // Delete compiled magic file.
            compiledMagic.delete();
            compiledMagic = null;
        }
    }

    public String identify(File file) throws IOException, LibMagicException {
        checkIfInitialized();
        // Extract MIME type and encoding using libmagic.
        String mimeType = null;

        if (file != null && file.canRead()) {
            mimeType = libMagicWrapper.getMimeType(
                    file.getAbsolutePath());
        }
        return mimeType;
    }
    public void setMagicFileDir(File magicDir) {
        magicFileDir = magicDir;
    }
}

